// Code generated by Prisma (prisma@1.25.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  activityAttendance: (
    where?: ActivityAttendanceWhereInput
  ) => Promise<boolean>;
  activityList: (where?: ActivityListWhereInput) => Promise<boolean>;
  activitySchedule: (where?: ActivityScheduleWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activityAttendance: (
    where: ActivityAttendanceWhereUniqueInput
  ) => ActivityAttendancePromise;
  activityAttendances: (args?: {
    where?: ActivityAttendanceWhereInput;
    orderBy?: ActivityAttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ActivityAttendance>;
  activityAttendancesConnection: (args?: {
    where?: ActivityAttendanceWhereInput;
    orderBy?: ActivityAttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityAttendanceConnectionPromise;
  activityList: (where: ActivityListWhereUniqueInput) => ActivityListPromise;
  activityLists: (args?: {
    where?: ActivityListWhereInput;
    orderBy?: ActivityListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ActivityList>;
  activityListsConnection: (args?: {
    where?: ActivityListWhereInput;
    orderBy?: ActivityListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityListConnectionPromise;
  activitySchedule: (
    where: ActivityScheduleWhereUniqueInput
  ) => ActivitySchedulePromise;
  activitySchedules: (args?: {
    where?: ActivityScheduleWhereInput;
    orderBy?: ActivityScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ActivitySchedule>;
  activitySchedulesConnection: (args?: {
    where?: ActivityScheduleWhereInput;
    orderBy?: ActivityScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityScheduleConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupPromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivityAttendance: (
    data: ActivityAttendanceCreateInput
  ) => ActivityAttendancePromise;
  updateActivityAttendance: (args: {
    data: ActivityAttendanceUpdateInput;
    where: ActivityAttendanceWhereUniqueInput;
  }) => ActivityAttendancePromise;
  updateManyActivityAttendances: (args: {
    data: ActivityAttendanceUpdateManyMutationInput;
    where?: ActivityAttendanceWhereInput;
  }) => BatchPayloadPromise;
  upsertActivityAttendance: (args: {
    where: ActivityAttendanceWhereUniqueInput;
    create: ActivityAttendanceCreateInput;
    update: ActivityAttendanceUpdateInput;
  }) => ActivityAttendancePromise;
  deleteActivityAttendance: (
    where: ActivityAttendanceWhereUniqueInput
  ) => ActivityAttendancePromise;
  deleteManyActivityAttendances: (
    where?: ActivityAttendanceWhereInput
  ) => BatchPayloadPromise;
  createActivityList: (data: ActivityListCreateInput) => ActivityListPromise;
  updateActivityList: (args: {
    data: ActivityListUpdateInput;
    where: ActivityListWhereUniqueInput;
  }) => ActivityListPromise;
  updateManyActivityLists: (args: {
    data: ActivityListUpdateManyMutationInput;
    where?: ActivityListWhereInput;
  }) => BatchPayloadPromise;
  upsertActivityList: (args: {
    where: ActivityListWhereUniqueInput;
    create: ActivityListCreateInput;
    update: ActivityListUpdateInput;
  }) => ActivityListPromise;
  deleteActivityList: (
    where: ActivityListWhereUniqueInput
  ) => ActivityListPromise;
  deleteManyActivityLists: (
    where?: ActivityListWhereInput
  ) => BatchPayloadPromise;
  createActivitySchedule: (
    data: ActivityScheduleCreateInput
  ) => ActivitySchedulePromise;
  updateActivitySchedule: (args: {
    data: ActivityScheduleUpdateInput;
    where: ActivityScheduleWhereUniqueInput;
  }) => ActivitySchedulePromise;
  updateManyActivitySchedules: (args: {
    data: ActivityScheduleUpdateManyMutationInput;
    where?: ActivityScheduleWhereInput;
  }) => BatchPayloadPromise;
  upsertActivitySchedule: (args: {
    where: ActivityScheduleWhereUniqueInput;
    create: ActivityScheduleCreateInput;
    update: ActivityScheduleUpdateInput;
  }) => ActivitySchedulePromise;
  deleteActivitySchedule: (
    where: ActivityScheduleWhereUniqueInput
  ) => ActivitySchedulePromise;
  deleteManyActivitySchedules: (
    where?: ActivityScheduleWhereInput
  ) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activityAttendance: (
    where?: ActivityAttendanceSubscriptionWhereInput
  ) => ActivityAttendanceSubscriptionPayloadSubscription;
  activityList: (
    where?: ActivityListSubscriptionWhereInput
  ) => ActivityListSubscriptionPayloadSubscription;
  activitySchedule: (
    where?: ActivityScheduleSubscriptionWhereInput
  ) => ActivityScheduleSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActivityScheduleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ActivityAttendanceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "presence_ASC"
  | "presence_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "oldId_ASC"
  | "oldId_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "dayOfBirth_ASC"
  | "dayOfBirth_DESC"
  | "monthOfBirth_ASC"
  | "monthOfBirth_DESC"
  | "yearOfBirth_ASC"
  | "yearOfBirth_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ActivityListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GroupUpdateWithoutMembersDataInput {
  name?: String;
  leader?: ProfileUpdateOneWithoutLeaderInput;
}

export type ActivityAttendanceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ActivityAttendanceUpdateWithWhereUniqueWithoutMemberInput {
  where: ActivityAttendanceWhereUniqueInput;
  data: ActivityAttendanceUpdateWithoutMemberDataInput;
}

export interface ActivityListWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  schedules_every?: ActivityScheduleWhereInput;
  schedules_some?: ActivityScheduleWhereInput;
  schedules_none?: ActivityScheduleWhereInput;
  AND?: ActivityListWhereInput[] | ActivityListWhereInput;
  OR?: ActivityListWhereInput[] | ActivityListWhereInput;
  NOT?: ActivityListWhereInput[] | ActivityListWhereInput;
}

export interface ActivityAttendanceUpdateWithoutMemberDataInput {
  schedule?: ActivityScheduleUpdateOneRequiredWithoutAttendancesInput;
  presence?: Boolean;
}

export interface ProfileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  oldId?: ID_Input;
  oldId_not?: ID_Input;
  oldId_in?: ID_Input[] | ID_Input;
  oldId_not_in?: ID_Input[] | ID_Input;
  oldId_lt?: ID_Input;
  oldId_lte?: ID_Input;
  oldId_gt?: ID_Input;
  oldId_gte?: ID_Input;
  oldId_contains?: ID_Input;
  oldId_not_contains?: ID_Input;
  oldId_starts_with?: ID_Input;
  oldId_not_starts_with?: ID_Input;
  oldId_ends_with?: ID_Input;
  oldId_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  gender?: Boolean;
  gender_not?: Boolean;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  dayOfBirth?: Int;
  dayOfBirth_not?: Int;
  dayOfBirth_in?: Int[] | Int;
  dayOfBirth_not_in?: Int[] | Int;
  dayOfBirth_lt?: Int;
  dayOfBirth_lte?: Int;
  dayOfBirth_gt?: Int;
  dayOfBirth_gte?: Int;
  monthOfBirth?: Int;
  monthOfBirth_not?: Int;
  monthOfBirth_in?: Int[] | Int;
  monthOfBirth_not_in?: Int[] | Int;
  monthOfBirth_lt?: Int;
  monthOfBirth_lte?: Int;
  monthOfBirth_gt?: Int;
  monthOfBirth_gte?: Int;
  yearOfBirth?: Int;
  yearOfBirth_not?: Int;
  yearOfBirth_in?: Int[] | Int;
  yearOfBirth_not_in?: Int[] | Int;
  yearOfBirth_lt?: Int;
  yearOfBirth_lte?: Int;
  yearOfBirth_gt?: Int;
  yearOfBirth_gte?: Int;
  group?: GroupWhereInput;
  leader?: GroupWhereInput;
  attendances_every?: ActivityAttendanceWhereInput;
  attendances_some?: ActivityAttendanceWhereInput;
  attendances_none?: ActivityAttendanceWhereInput;
  AND?: ProfileWhereInput[] | ProfileWhereInput;
  OR?: ProfileWhereInput[] | ProfileWhereInput;
  NOT?: ProfileWhereInput[] | ProfileWhereInput;
}

export interface ProfileCreateManyWithoutGroupInput {
  create?: ProfileCreateWithoutGroupInput[] | ProfileCreateWithoutGroupInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
}

export interface ActivityListUpdateInput {
  name?: String;
  schedules?: ActivityScheduleUpdateManyWithoutActivityInput;
}

export interface ProfileCreateWithoutGroupInput {
  oldId: ID_Input;
  firstName: String;
  lastName: String;
  gender: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  leader?: GroupCreateOneWithoutLeaderInput;
  attendances?: ActivityAttendanceCreateManyWithoutMemberInput;
}

export interface ActivityAttendanceUpsertWithWhereUniqueWithoutMemberInput {
  where: ActivityAttendanceWhereUniqueInput;
  update: ActivityAttendanceUpdateWithoutMemberDataInput;
  create: ActivityAttendanceCreateWithoutMemberInput;
}

export interface ActivityAttendanceUpdateInput {
  schedule?: ActivityScheduleUpdateOneRequiredWithoutAttendancesInput;
  member?: ProfileUpdateOneRequiredWithoutAttendancesInput;
  presence?: Boolean;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProfileWhereInput;
  AND?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  OR?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  NOT?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
}

export interface ActivityScheduleUpdateOneRequiredWithoutAttendancesInput {
  create?: ActivityScheduleCreateWithoutAttendancesInput;
  update?: ActivityScheduleUpdateWithoutAttendancesDataInput;
  upsert?: ActivityScheduleUpsertWithoutAttendancesInput;
  connect?: ActivityScheduleWhereUniqueInput;
}

export interface ActivityScheduleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActivityScheduleWhereInput;
  AND?:
    | ActivityScheduleSubscriptionWhereInput[]
    | ActivityScheduleSubscriptionWhereInput;
  OR?:
    | ActivityScheduleSubscriptionWhereInput[]
    | ActivityScheduleSubscriptionWhereInput;
  NOT?:
    | ActivityScheduleSubscriptionWhereInput[]
    | ActivityScheduleSubscriptionWhereInput;
}

export interface ActivityScheduleUpdateWithoutAttendancesDataInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
  activity?: ActivityListUpdateOneRequiredWithoutSchedulesInput;
}

export interface ActivityAttendanceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActivityAttendanceWhereInput;
  AND?:
    | ActivityAttendanceSubscriptionWhereInput[]
    | ActivityAttendanceSubscriptionWhereInput;
  OR?:
    | ActivityAttendanceSubscriptionWhereInput[]
    | ActivityAttendanceSubscriptionWhereInput;
  NOT?:
    | ActivityAttendanceSubscriptionWhereInput[]
    | ActivityAttendanceSubscriptionWhereInput;
}

export interface ActivityListUpdateOneRequiredWithoutSchedulesInput {
  create?: ActivityListCreateWithoutSchedulesInput;
  update?: ActivityListUpdateWithoutSchedulesDataInput;
  upsert?: ActivityListUpsertWithoutSchedulesInput;
  connect?: ActivityListWhereUniqueInput;
}

export interface ProfileUpdateInput {
  oldId?: ID_Input;
  firstName?: String;
  lastName?: String;
  gender?: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  group?: GroupUpdateOneWithoutMembersInput;
  leader?: GroupUpdateOneWithoutLeaderInput;
  attendances?: ActivityAttendanceUpdateManyWithoutMemberInput;
}

export interface ActivityListUpdateWithoutSchedulesDataInput {
  name?: String;
}

export type ActivityListWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ActivityListUpsertWithoutSchedulesInput {
  update: ActivityListUpdateWithoutSchedulesDataInput;
  create: ActivityListCreateWithoutSchedulesInput;
}

export interface GroupUpdateInput {
  name?: String;
  members?: ProfileUpdateManyWithoutGroupInput;
  leader?: ProfileUpdateOneWithoutLeaderInput;
}

export interface ActivityScheduleUpsertWithoutAttendancesInput {
  update: ActivityScheduleUpdateWithoutAttendancesDataInput;
  create: ActivityScheduleCreateWithoutAttendancesInput;
}

export interface ActivityScheduleUpdateManyMutationInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface ProfileUpdateOneRequiredWithoutAttendancesInput {
  create?: ProfileCreateWithoutAttendancesInput;
  update?: ProfileUpdateWithoutAttendancesDataInput;
  upsert?: ProfileUpsertWithoutAttendancesInput;
  connect?: ProfileWhereUniqueInput;
}

export interface ActivityScheduleUpdateInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
  activity?: ActivityListUpdateOneRequiredWithoutSchedulesInput;
  attendances?: ActivityAttendanceUpdateManyWithoutScheduleInput;
}

export interface ProfileUpdateWithoutAttendancesDataInput {
  oldId?: ID_Input;
  firstName?: String;
  lastName?: String;
  gender?: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  group?: GroupUpdateOneWithoutMembersInput;
  leader?: GroupUpdateOneWithoutLeaderInput;
}

export interface ActivityListUpdateManyMutationInput {
  name?: String;
}

export interface GroupUpdateOneWithoutMembersInput {
  create?: GroupCreateWithoutMembersInput;
  update?: GroupUpdateWithoutMembersDataInput;
  upsert?: GroupUpsertWithoutMembersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GroupWhereUniqueInput;
}

export interface ActivityScheduleUpdateManyDataInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface ActivityAttendanceUpdateManyWithoutScheduleInput {
  create?:
    | ActivityAttendanceCreateWithoutScheduleInput[]
    | ActivityAttendanceCreateWithoutScheduleInput;
  delete?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
  connect?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
  disconnect?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
  update?:
    | ActivityAttendanceUpdateWithWhereUniqueWithoutScheduleInput[]
    | ActivityAttendanceUpdateWithWhereUniqueWithoutScheduleInput;
  upsert?:
    | ActivityAttendanceUpsertWithWhereUniqueWithoutScheduleInput[]
    | ActivityAttendanceUpsertWithWhereUniqueWithoutScheduleInput;
  deleteMany?:
    | ActivityAttendanceScalarWhereInput[]
    | ActivityAttendanceScalarWhereInput;
  updateMany?:
    | ActivityAttendanceUpdateManyWithWhereNestedInput[]
    | ActivityAttendanceUpdateManyWithWhereNestedInput;
}

export interface ActivityScheduleScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  AND?: ActivityScheduleScalarWhereInput[] | ActivityScheduleScalarWhereInput;
  OR?: ActivityScheduleScalarWhereInput[] | ActivityScheduleScalarWhereInput;
  NOT?: ActivityScheduleScalarWhereInput[] | ActivityScheduleScalarWhereInput;
}

export interface ProfileUpdateOneWithoutLeaderInput {
  create?: ProfileCreateWithoutLeaderInput;
  update?: ProfileUpdateWithoutLeaderDataInput;
  upsert?: ProfileUpsertWithoutLeaderInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProfileWhereUniqueInput;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  oldId?: ID_Input;
}>;

export interface ProfileUpdateWithoutLeaderDataInput {
  oldId?: ID_Input;
  firstName?: String;
  lastName?: String;
  gender?: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  group?: GroupUpdateOneWithoutMembersInput;
  attendances?: ActivityAttendanceUpdateManyWithoutMemberInput;
}

export interface ActivityAttendanceUpdateWithoutScheduleDataInput {
  member?: ProfileUpdateOneRequiredWithoutAttendancesInput;
  presence?: Boolean;
}

export interface ActivityAttendanceUpdateManyWithoutMemberInput {
  create?:
    | ActivityAttendanceCreateWithoutMemberInput[]
    | ActivityAttendanceCreateWithoutMemberInput;
  delete?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
  connect?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
  disconnect?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
  update?:
    | ActivityAttendanceUpdateWithWhereUniqueWithoutMemberInput[]
    | ActivityAttendanceUpdateWithWhereUniqueWithoutMemberInput;
  upsert?:
    | ActivityAttendanceUpsertWithWhereUniqueWithoutMemberInput[]
    | ActivityAttendanceUpsertWithWhereUniqueWithoutMemberInput;
  deleteMany?:
    | ActivityAttendanceScalarWhereInput[]
    | ActivityAttendanceScalarWhereInput;
  updateMany?:
    | ActivityAttendanceUpdateManyWithWhereNestedInput[]
    | ActivityAttendanceUpdateManyWithWhereNestedInput;
}

export interface ActivityScheduleCreateOneWithoutAttendancesInput {
  create?: ActivityScheduleCreateWithoutAttendancesInput;
  connect?: ActivityScheduleWhereUniqueInput;
}

export interface ActivityAttendanceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  schedule?: ActivityScheduleWhereInput;
  member?: ProfileWhereInput;
  presence?: Boolean;
  presence_not?: Boolean;
  AND?: ActivityAttendanceWhereInput[] | ActivityAttendanceWhereInput;
  OR?: ActivityAttendanceWhereInput[] | ActivityAttendanceWhereInput;
  NOT?: ActivityAttendanceWhereInput[] | ActivityAttendanceWhereInput;
}

export interface ActivityListCreateOneWithoutSchedulesInput {
  create?: ActivityListCreateWithoutSchedulesInput;
  connect?: ActivityListWhereUniqueInput;
}

export interface ActivityScheduleUpdateWithoutActivityDataInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
  attendances?: ActivityAttendanceUpdateManyWithoutScheduleInput;
}

export interface ProfileCreateOneWithoutAttendancesInput {
  create?: ProfileCreateWithoutAttendancesInput;
  connect?: ProfileWhereUniqueInput;
}

export interface GroupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  members_every?: ProfileWhereInput;
  members_some?: ProfileWhereInput;
  members_none?: ProfileWhereInput;
  leader?: ProfileWhereInput;
  AND?: GroupWhereInput[] | GroupWhereInput;
  OR?: GroupWhereInput[] | GroupWhereInput;
  NOT?: GroupWhereInput[] | GroupWhereInput;
}

export interface GroupCreateOneWithoutMembersInput {
  create?: GroupCreateWithoutMembersInput;
  connect?: GroupWhereUniqueInput;
}

export interface ActivityAttendanceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  presence?: Boolean;
  presence_not?: Boolean;
  AND?:
    | ActivityAttendanceScalarWhereInput[]
    | ActivityAttendanceScalarWhereInput;
  OR?:
    | ActivityAttendanceScalarWhereInput[]
    | ActivityAttendanceScalarWhereInput;
  NOT?:
    | ActivityAttendanceScalarWhereInput[]
    | ActivityAttendanceScalarWhereInput;
}

export interface ProfileCreateOneWithoutLeaderInput {
  create?: ProfileCreateWithoutLeaderInput;
  connect?: ProfileWhereUniqueInput;
}

export interface ActivityAttendanceUpdateManyWithWhereNestedInput {
  where: ActivityAttendanceScalarWhereInput;
  data: ActivityAttendanceUpdateManyDataInput;
}

export interface ActivityAttendanceCreateManyWithoutMemberInput {
  create?:
    | ActivityAttendanceCreateWithoutMemberInput[]
    | ActivityAttendanceCreateWithoutMemberInput;
  connect?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
}

export interface ActivityAttendanceUpdateManyDataInput {
  presence?: Boolean;
}

export interface GroupCreateOneWithoutLeaderInput {
  create?: GroupCreateWithoutLeaderInput;
  connect?: GroupWhereUniqueInput;
}

export interface ProfileUpsertWithoutLeaderInput {
  update: ProfileUpdateWithoutLeaderDataInput;
  create: ProfileCreateWithoutLeaderInput;
}

export interface ActivityScheduleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  activity?: ActivityListWhereInput;
  attendances_every?: ActivityAttendanceWhereInput;
  attendances_some?: ActivityAttendanceWhereInput;
  attendances_none?: ActivityAttendanceWhereInput;
  AND?: ActivityScheduleWhereInput[] | ActivityScheduleWhereInput;
  OR?: ActivityScheduleWhereInput[] | ActivityScheduleWhereInput;
  NOT?: ActivityScheduleWhereInput[] | ActivityScheduleWhereInput;
}

export interface GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput;
  create: GroupCreateWithoutMembersInput;
}

export interface ActivityListSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActivityListWhereInput;
  AND?:
    | ActivityListSubscriptionWhereInput[]
    | ActivityListSubscriptionWhereInput;
  OR?:
    | ActivityListSubscriptionWhereInput[]
    | ActivityListSubscriptionWhereInput;
  NOT?:
    | ActivityListSubscriptionWhereInput[]
    | ActivityListSubscriptionWhereInput;
}

export interface GroupUpdateOneWithoutLeaderInput {
  create?: GroupCreateWithoutLeaderInput;
  update?: GroupUpdateWithoutLeaderDataInput;
  upsert?: GroupUpsertWithoutLeaderInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GroupWhereUniqueInput;
}

export interface ProfileCreateInput {
  oldId: ID_Input;
  firstName: String;
  lastName: String;
  gender: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  group?: GroupCreateOneWithoutMembersInput;
  leader?: GroupCreateOneWithoutLeaderInput;
  attendances?: ActivityAttendanceCreateManyWithoutMemberInput;
}

export interface GroupUpdateWithoutLeaderDataInput {
  name?: String;
  members?: ProfileUpdateManyWithoutGroupInput;
}

export interface GroupCreateInput {
  name: String;
  members?: ProfileCreateManyWithoutGroupInput;
  leader?: ProfileCreateOneWithoutLeaderInput;
}

export interface ProfileUpdateManyWithoutGroupInput {
  create?: ProfileCreateWithoutGroupInput[] | ProfileCreateWithoutGroupInput;
  delete?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  disconnect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  update?:
    | ProfileUpdateWithWhereUniqueWithoutGroupInput[]
    | ProfileUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | ProfileUpsertWithWhereUniqueWithoutGroupInput[]
    | ProfileUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?: ProfileScalarWhereInput[] | ProfileScalarWhereInput;
  updateMany?:
    | ProfileUpdateManyWithWhereNestedInput[]
    | ProfileUpdateManyWithWhereNestedInput;
}

export interface ActivityScheduleCreateInput {
  start: DateTimeInput;
  end: DateTimeInput;
  activity: ActivityListCreateOneWithoutSchedulesInput;
  attendances?: ActivityAttendanceCreateManyWithoutScheduleInput;
}

export interface ProfileUpdateWithWhereUniqueWithoutGroupInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateWithoutGroupDataInput;
}

export interface ActivityScheduleUpdateManyWithWhereNestedInput {
  where: ActivityScheduleScalarWhereInput;
  data: ActivityScheduleUpdateManyDataInput;
}

export interface ProfileUpdateWithoutGroupDataInput {
  oldId?: ID_Input;
  firstName?: String;
  lastName?: String;
  gender?: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  leader?: GroupUpdateOneWithoutLeaderInput;
  attendances?: ActivityAttendanceUpdateManyWithoutMemberInput;
}

export interface ActivityAttendanceUpsertWithWhereUniqueWithoutScheduleInput {
  where: ActivityAttendanceWhereUniqueInput;
  update: ActivityAttendanceUpdateWithoutScheduleDataInput;
  create: ActivityAttendanceCreateWithoutScheduleInput;
}

export interface ProfileUpsertWithWhereUniqueWithoutGroupInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateWithoutGroupDataInput;
  create: ProfileCreateWithoutGroupInput;
}

export interface ActivityAttendanceCreateInput {
  schedule: ActivityScheduleCreateOneWithoutAttendancesInput;
  member: ProfileCreateOneWithoutAttendancesInput;
  presence: Boolean;
}

export interface ProfileScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  oldId?: ID_Input;
  oldId_not?: ID_Input;
  oldId_in?: ID_Input[] | ID_Input;
  oldId_not_in?: ID_Input[] | ID_Input;
  oldId_lt?: ID_Input;
  oldId_lte?: ID_Input;
  oldId_gt?: ID_Input;
  oldId_gte?: ID_Input;
  oldId_contains?: ID_Input;
  oldId_not_contains?: ID_Input;
  oldId_starts_with?: ID_Input;
  oldId_not_starts_with?: ID_Input;
  oldId_ends_with?: ID_Input;
  oldId_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  gender?: Boolean;
  gender_not?: Boolean;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  dayOfBirth?: Int;
  dayOfBirth_not?: Int;
  dayOfBirth_in?: Int[] | Int;
  dayOfBirth_not_in?: Int[] | Int;
  dayOfBirth_lt?: Int;
  dayOfBirth_lte?: Int;
  dayOfBirth_gt?: Int;
  dayOfBirth_gte?: Int;
  monthOfBirth?: Int;
  monthOfBirth_not?: Int;
  monthOfBirth_in?: Int[] | Int;
  monthOfBirth_not_in?: Int[] | Int;
  monthOfBirth_lt?: Int;
  monthOfBirth_lte?: Int;
  monthOfBirth_gt?: Int;
  monthOfBirth_gte?: Int;
  yearOfBirth?: Int;
  yearOfBirth_not?: Int;
  yearOfBirth_in?: Int[] | Int;
  yearOfBirth_not_in?: Int[] | Int;
  yearOfBirth_lt?: Int;
  yearOfBirth_lte?: Int;
  yearOfBirth_gt?: Int;
  yearOfBirth_gte?: Int;
  AND?: ProfileScalarWhereInput[] | ProfileScalarWhereInput;
  OR?: ProfileScalarWhereInput[] | ProfileScalarWhereInput;
  NOT?: ProfileScalarWhereInput[] | ProfileScalarWhereInput;
}

export interface ActivityListCreateWithoutSchedulesInput {
  name: String;
}

export interface ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput;
  data: ProfileUpdateManyDataInput;
}

export interface GroupCreateWithoutMembersInput {
  name: String;
  leader?: ProfileCreateOneWithoutLeaderInput;
}

export interface ProfileUpdateManyDataInput {
  oldId?: ID_Input;
  firstName?: String;
  lastName?: String;
  gender?: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
}

export interface ActivityAttendanceCreateWithoutMemberInput {
  schedule: ActivityScheduleCreateOneWithoutAttendancesInput;
  presence: Boolean;
}

export interface GroupUpsertWithoutLeaderInput {
  update: GroupUpdateWithoutLeaderDataInput;
  create: GroupCreateWithoutLeaderInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GroupWhereInput;
  AND?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  OR?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  NOT?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
}

export interface ProfileUpsertWithoutAttendancesInput {
  update: ProfileUpdateWithoutAttendancesDataInput;
  create: ProfileCreateWithoutAttendancesInput;
}

export interface GroupUpdateManyMutationInput {
  name?: String;
}

export interface ActivityAttendanceUpdateManyMutationInput {
  presence?: Boolean;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ActivityScheduleUpdateWithWhereUniqueWithoutActivityInput {
  where: ActivityScheduleWhereUniqueInput;
  data: ActivityScheduleUpdateWithoutActivityDataInput;
}

export interface ActivityAttendanceUpdateWithWhereUniqueWithoutScheduleInput {
  where: ActivityAttendanceWhereUniqueInput;
  data: ActivityAttendanceUpdateWithoutScheduleDataInput;
}

export interface ActivityScheduleUpdateManyWithoutActivityInput {
  create?:
    | ActivityScheduleCreateWithoutActivityInput[]
    | ActivityScheduleCreateWithoutActivityInput;
  delete?:
    | ActivityScheduleWhereUniqueInput[]
    | ActivityScheduleWhereUniqueInput;
  connect?:
    | ActivityScheduleWhereUniqueInput[]
    | ActivityScheduleWhereUniqueInput;
  disconnect?:
    | ActivityScheduleWhereUniqueInput[]
    | ActivityScheduleWhereUniqueInput;
  update?:
    | ActivityScheduleUpdateWithWhereUniqueWithoutActivityInput[]
    | ActivityScheduleUpdateWithWhereUniqueWithoutActivityInput;
  upsert?:
    | ActivityScheduleUpsertWithWhereUniqueWithoutActivityInput[]
    | ActivityScheduleUpsertWithWhereUniqueWithoutActivityInput;
  deleteMany?:
    | ActivityScheduleScalarWhereInput[]
    | ActivityScheduleScalarWhereInput;
  updateMany?:
    | ActivityScheduleUpdateManyWithWhereNestedInput[]
    | ActivityScheduleUpdateManyWithWhereNestedInput;
}

export interface ProfileCreateWithoutAttendancesInput {
  oldId: ID_Input;
  firstName: String;
  lastName: String;
  gender: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  group?: GroupCreateOneWithoutMembersInput;
  leader?: GroupCreateOneWithoutLeaderInput;
}

export interface ActivityListCreateInput {
  name: String;
  schedules?: ActivityScheduleCreateManyWithoutActivityInput;
}

export interface GroupCreateWithoutLeaderInput {
  name: String;
  members?: ProfileCreateManyWithoutGroupInput;
}

export interface ActivityAttendanceCreateWithoutScheduleInput {
  member: ProfileCreateOneWithoutAttendancesInput;
  presence: Boolean;
}

export interface ActivityAttendanceCreateManyWithoutScheduleInput {
  create?:
    | ActivityAttendanceCreateWithoutScheduleInput[]
    | ActivityAttendanceCreateWithoutScheduleInput;
  connect?:
    | ActivityAttendanceWhereUniqueInput[]
    | ActivityAttendanceWhereUniqueInput;
}

export interface ActivityScheduleCreateWithoutActivityInput {
  start: DateTimeInput;
  end: DateTimeInput;
  attendances?: ActivityAttendanceCreateManyWithoutScheduleInput;
}

export interface ActivityScheduleCreateManyWithoutActivityInput {
  create?:
    | ActivityScheduleCreateWithoutActivityInput[]
    | ActivityScheduleCreateWithoutActivityInput;
  connect?:
    | ActivityScheduleWhereUniqueInput[]
    | ActivityScheduleWhereUniqueInput;
}

export interface ProfileUpdateManyMutationInput {
  oldId?: ID_Input;
  firstName?: String;
  lastName?: String;
  gender?: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
}

export interface ProfileCreateWithoutLeaderInput {
  oldId: ID_Input;
  firstName: String;
  lastName: String;
  gender: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
  group?: GroupCreateOneWithoutMembersInput;
  attendances?: ActivityAttendanceCreateManyWithoutMemberInput;
}

export interface ActivityScheduleCreateWithoutAttendancesInput {
  start: DateTimeInput;
  end: DateTimeInput;
  activity: ActivityListCreateOneWithoutSchedulesInput;
}

export interface ActivityScheduleUpsertWithWhereUniqueWithoutActivityInput {
  where: ActivityScheduleWhereUniqueInput;
  update: ActivityScheduleUpdateWithoutActivityDataInput;
  create: ActivityScheduleCreateWithoutActivityInput;
}

export type ActivityScheduleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  oldId: ID_Output;
  firstName: String;
  lastName: String;
  gender: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  oldId: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  gender: () => Promise<Boolean>;
  phoneNumber: () => Promise<String>;
  dayOfBirth: () => Promise<Int>;
  monthOfBirth: () => Promise<Int>;
  yearOfBirth: () => Promise<Int>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  oldId: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Boolean>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  dayOfBirth: () => Promise<AsyncIterator<Int>>;
  monthOfBirth: () => Promise<AsyncIterator<Int>>;
  yearOfBirth: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityListConnection {
  pageInfo: PageInfo;
  edges: ActivityListEdge[];
}

export interface ActivityListConnectionPromise
  extends Promise<ActivityListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityListEdge>>() => T;
  aggregate: <T = AggregateActivityListPromise>() => T;
}

export interface ActivityListConnectionSubscription
  extends Promise<AsyncIterator<ActivityListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivityListSubscription>() => T;
}

export interface Profile {
  id: ID_Output;
  oldId: ID_Output;
  firstName: String;
  lastName: String;
  gender: Boolean;
  phoneNumber?: String;
  dayOfBirth?: Int;
  monthOfBirth?: Int;
  yearOfBirth?: Int;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  oldId: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  gender: () => Promise<Boolean>;
  phoneNumber: () => Promise<String>;
  dayOfBirth: () => Promise<Int>;
  monthOfBirth: () => Promise<Int>;
  yearOfBirth: () => Promise<Int>;
  group: <T = GroupPromise>() => T;
  leader: <T = GroupPromise>() => T;
  attendances: <T = FragmentableArray<ActivityAttendance>>(args?: {
    where?: ActivityAttendanceWhereInput;
    orderBy?: ActivityAttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  oldId: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Boolean>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  dayOfBirth: () => Promise<AsyncIterator<Int>>;
  monthOfBirth: () => Promise<AsyncIterator<Int>>;
  yearOfBirth: () => Promise<AsyncIterator<Int>>;
  group: <T = GroupSubscription>() => T;
  leader: <T = GroupSubscription>() => T;
  attendances: <
    T = Promise<AsyncIterator<ActivityAttendanceSubscription>>
  >(args?: {
    where?: ActivityAttendanceWhereInput;
    orderBy?: ActivityAttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface AggregateActivityAttendance {
  count: Int;
}

export interface AggregateActivityAttendancePromise
  extends Promise<AggregateActivityAttendance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivityAttendanceSubscription
  extends Promise<AsyncIterator<AggregateActivityAttendance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ActivityAttendanceEdge {
  node: ActivityAttendance;
  cursor: String;
}

export interface ActivityAttendanceEdgePromise
  extends Promise<ActivityAttendanceEdge>,
    Fragmentable {
  node: <T = ActivityAttendancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityAttendanceEdgeSubscription
  extends Promise<AsyncIterator<ActivityAttendanceEdge>>,
    Fragmentable {
  node: <T = ActivityAttendanceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityAttendanceConnection {
  pageInfo: PageInfo;
  edges: ActivityAttendanceEdge[];
}

export interface ActivityAttendanceConnectionPromise
  extends Promise<ActivityAttendanceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityAttendanceEdge>>() => T;
  aggregate: <T = AggregateActivityAttendancePromise>() => T;
}

export interface ActivityAttendanceConnectionSubscription
  extends Promise<AsyncIterator<ActivityAttendanceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ActivityAttendanceEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateActivityAttendanceSubscription>() => T;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface ActivityAttendance {
  id: ID_Output;
  presence: Boolean;
}

export interface ActivityAttendancePromise
  extends Promise<ActivityAttendance>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  schedule: <T = ActivitySchedulePromise>() => T;
  member: <T = ProfilePromise>() => T;
  presence: () => Promise<Boolean>;
}

export interface ActivityAttendanceSubscription
  extends Promise<AsyncIterator<ActivityAttendance>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  schedule: <T = ActivityScheduleSubscription>() => T;
  member: <T = ProfileSubscription>() => T;
  presence: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateActivitySchedule {
  count: Int;
}

export interface AggregateActivitySchedulePromise
  extends Promise<AggregateActivitySchedule>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivityScheduleSubscription
  extends Promise<AsyncIterator<AggregateActivitySchedule>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityAttendanceSubscriptionPayload {
  mutation: MutationType;
  node: ActivityAttendance;
  updatedFields: String[];
  previousValues: ActivityAttendancePreviousValues;
}

export interface ActivityAttendanceSubscriptionPayloadPromise
  extends Promise<ActivityAttendanceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityAttendancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityAttendancePreviousValuesPromise>() => T;
}

export interface ActivityAttendanceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivityAttendanceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivityAttendanceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityAttendancePreviousValuesSubscription>() => T;
}

export interface ActivityScheduleConnection {
  pageInfo: PageInfo;
  edges: ActivityScheduleEdge[];
}

export interface ActivityScheduleConnectionPromise
  extends Promise<ActivityScheduleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityScheduleEdge>>() => T;
  aggregate: <T = AggregateActivitySchedulePromise>() => T;
}

export interface ActivityScheduleConnectionSubscription
  extends Promise<AsyncIterator<ActivityScheduleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityScheduleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivityScheduleSubscription>() => T;
}

export interface ActivityAttendancePreviousValues {
  id: ID_Output;
  presence: Boolean;
}

export interface ActivityAttendancePreviousValuesPromise
  extends Promise<ActivityAttendancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  presence: () => Promise<Boolean>;
}

export interface ActivityAttendancePreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityAttendancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  presence: () => Promise<AsyncIterator<Boolean>>;
}

export interface ActivityListEdge {
  node: ActivityList;
  cursor: String;
}

export interface ActivityListEdgePromise
  extends Promise<ActivityListEdge>,
    Fragmentable {
  node: <T = ActivityListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityListEdgeSubscription
  extends Promise<AsyncIterator<ActivityListEdge>>,
    Fragmentable {
  node: <T = ActivityListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityList {
  id: ID_Output;
  name: String;
}

export interface ActivityListPromise
  extends Promise<ActivityList>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  schedules: <T = FragmentableArray<ActivitySchedule>>(args?: {
    where?: ActivityScheduleWhereInput;
    orderBy?: ActivityScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivityListSubscription
  extends Promise<AsyncIterator<ActivityList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  schedules: <T = Promise<AsyncIterator<ActivityScheduleSubscription>>>(args?: {
    where?: ActivityScheduleWhereInput;
    orderBy?: ActivityScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityListSubscriptionPayload {
  mutation: MutationType;
  node: ActivityList;
  updatedFields: String[];
  previousValues: ActivityListPreviousValues;
}

export interface ActivityListSubscriptionPayloadPromise
  extends Promise<ActivityListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityListPreviousValuesPromise>() => T;
}

export interface ActivityListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivityListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivityListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityListPreviousValuesSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityScheduleEdge {
  node: ActivitySchedule;
  cursor: String;
}

export interface ActivityScheduleEdgePromise
  extends Promise<ActivityScheduleEdge>,
    Fragmentable {
  node: <T = ActivitySchedulePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityScheduleEdgeSubscription
  extends Promise<AsyncIterator<ActivityScheduleEdge>>,
    Fragmentable {
  node: <T = ActivityScheduleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivitySchedulePreviousValues {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface ActivitySchedulePreviousValuesPromise
  extends Promise<ActivitySchedulePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface ActivitySchedulePreviousValuesSubscription
  extends Promise<AsyncIterator<ActivitySchedulePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivityScheduleSubscriptionPayload {
  mutation: MutationType;
  node: ActivitySchedule;
  updatedFields: String[];
  previousValues: ActivitySchedulePreviousValues;
}

export interface ActivityScheduleSubscriptionPayloadPromise
  extends Promise<ActivityScheduleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivitySchedulePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivitySchedulePreviousValuesPromise>() => T;
}

export interface ActivityScheduleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivityScheduleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivityScheduleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivitySchedulePreviousValuesSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  name: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  leader: <T = ProfilePromise>() => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<ProfileSubscription>>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  leader: <T = ProfileSubscription>() => T;
}

export interface ActivityListPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ActivityListPreviousValuesPromise
  extends Promise<ActivityListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ActivityListPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActivityList {
  count: Int;
}

export interface AggregateActivityListPromise
  extends Promise<AggregateActivityList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivityListSubscription
  extends Promise<AsyncIterator<AggregateActivityList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivitySchedule {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface ActivitySchedulePromise
  extends Promise<ActivitySchedule>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  activity: <T = ActivityListPromise>() => T;
  attendances: <T = FragmentableArray<ActivityAttendance>>(args?: {
    where?: ActivityAttendanceWhereInput;
    orderBy?: ActivityAttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivityScheduleSubscription
  extends Promise<AsyncIterator<ActivitySchedule>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  activity: <T = ActivityListSubscription>() => T;
  attendances: <
    T = Promise<AsyncIterator<ActivityAttendanceSubscription>>
  >(args?: {
    where?: ActivityAttendanceWhereInput;
    orderBy?: ActivityAttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ActivityAttendance",
    embedded: false
  },
  {
    name: "ActivityList",
    embedded: false
  },
  {
    name: "ActivitySchedule",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://graph.btngiadinh.com/vichurch-btngiadinh/dev`,
  secret: `$(env:PRISMA_MANAGEMENT_API_SECRET)`
});
export const prisma = new Prisma();
