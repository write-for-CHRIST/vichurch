type VCProfile {
  id: ID!
  firstName: String!
  lastName: String!
  phoneNumber: AWSPhone
  dayOfBirth: Int
  monthOfBirth: Int
  yearOfBirth: Int
  group: VCGroup
  leader: VCGroup
  attendances(filter: ModelVCActivityAttendanceFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelVCActivityAttendanceConnection
}

type VCGroup {
  id: ID!
  name: String!
  members(filter: ModelVCProfileFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelVCProfileConnection
  leader: VCProfile
}

type VCActivityList {
  id: ID!
  name: String!
  schedules(filter: ModelVCActivityScheduleFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelVCActivityScheduleConnection
}

type VCActivitySchedule {
  id: ID!
  start: AWSDateTime!
  end: AWSDateTime!
  activity: VCActivityList!
  attendances(filter: ModelVCActivityAttendanceFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelVCActivityAttendanceConnection
}

type VCActivityAttendance {
  id: ID!
  schedule: VCActivitySchedule!
  member: VCProfile!
  presence: Boolean!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelVCProfileConnection {
  items: [VCProfile]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelVCProfileFilterInput {
  id: ModelIDFilterInput
  firstName: ModelStringFilterInput
  lastName: ModelStringFilterInput
  phoneNumber: ModelStringFilterInput
  dayOfBirth: ModelIntFilterInput
  monthOfBirth: ModelIntFilterInput
  yearOfBirth: ModelIntFilterInput
  and: [ModelVCProfileFilterInput]
  or: [ModelVCProfileFilterInput]
  not: ModelVCProfileFilterInput
}

type Query {
  getVCProfile(id: ID!): VCProfile
  listVCProfiles(filter: ModelVCProfileFilterInput, limit: Int, nextToken: String): ModelVCProfileConnection
  getVCGroup(id: ID!): VCGroup
  listVCGroups(filter: ModelVCGroupFilterInput, limit: Int, nextToken: String): ModelVCGroupConnection
  getVCActivityList(id: ID!): VCActivityList
  listVCActivityLists(filter: ModelVCActivityListFilterInput, limit: Int, nextToken: String): ModelVCActivityListConnection
  getVCActivitySchedule(id: ID!): VCActivitySchedule
  listVCActivitySchedules(filter: ModelVCActivityScheduleFilterInput, limit: Int, nextToken: String): ModelVCActivityScheduleConnection
  getVCActivityAttendance(id: ID!): VCActivityAttendance
  listVCActivityAttendances(filter: ModelVCActivityAttendanceFilterInput, limit: Int, nextToken: String): ModelVCActivityAttendanceConnection
}

input CreateVCProfileInput {
  id: ID
  firstName: String!
  lastName: String!
  phoneNumber: AWSPhone
  dayOfBirth: Int
  monthOfBirth: Int
  yearOfBirth: Int
  vCProfileGroupId: ID
  vCProfileLeaderId: ID
}

input UpdateVCProfileInput {
  id: ID!
  firstName: String
  lastName: String
  phoneNumber: AWSPhone
  dayOfBirth: Int
  monthOfBirth: Int
  yearOfBirth: Int
  vCProfileGroupId: ID
  vCProfileLeaderId: ID
}

input DeleteVCProfileInput {
  id: ID
}

type Mutation {
  createVCProfile(input: CreateVCProfileInput!): VCProfile
  updateVCProfile(input: UpdateVCProfileInput!): VCProfile
  deleteVCProfile(input: DeleteVCProfileInput!): VCProfile
  createVCGroup(input: CreateVCGroupInput!): VCGroup
  updateVCGroup(input: UpdateVCGroupInput!): VCGroup
  deleteVCGroup(input: DeleteVCGroupInput!): VCGroup
  createVCActivityList(input: CreateVCActivityListInput!): VCActivityList
  updateVCActivityList(input: UpdateVCActivityListInput!): VCActivityList
  deleteVCActivityList(input: DeleteVCActivityListInput!): VCActivityList
  createVCActivitySchedule(input: CreateVCActivityScheduleInput!): VCActivitySchedule
  updateVCActivitySchedule(input: UpdateVCActivityScheduleInput!): VCActivitySchedule
  deleteVCActivitySchedule(input: DeleteVCActivityScheduleInput!): VCActivitySchedule
  createVCActivityAttendance(input: CreateVCActivityAttendanceInput!): VCActivityAttendance
  updateVCActivityAttendance(input: UpdateVCActivityAttendanceInput!): VCActivityAttendance
  deleteVCActivityAttendance(input: DeleteVCActivityAttendanceInput!): VCActivityAttendance
}

type Subscription {
  onCreateVCProfile: VCProfile @aws_subscribe(mutations: ["createVCProfile"])
  onUpdateVCProfile: VCProfile @aws_subscribe(mutations: ["updateVCProfile"])
  onDeleteVCProfile: VCProfile @aws_subscribe(mutations: ["deleteVCProfile"])
  onCreateVCGroup: VCGroup @aws_subscribe(mutations: ["createVCGroup"])
  onUpdateVCGroup: VCGroup @aws_subscribe(mutations: ["updateVCGroup"])
  onDeleteVCGroup: VCGroup @aws_subscribe(mutations: ["deleteVCGroup"])
  onCreateVCActivityList: VCActivityList @aws_subscribe(mutations: ["createVCActivityList"])
  onUpdateVCActivityList: VCActivityList @aws_subscribe(mutations: ["updateVCActivityList"])
  onDeleteVCActivityList: VCActivityList @aws_subscribe(mutations: ["deleteVCActivityList"])
  onCreateVCActivitySchedule: VCActivitySchedule @aws_subscribe(mutations: ["createVCActivitySchedule"])
  onUpdateVCActivitySchedule: VCActivitySchedule @aws_subscribe(mutations: ["updateVCActivitySchedule"])
  onDeleteVCActivitySchedule: VCActivitySchedule @aws_subscribe(mutations: ["deleteVCActivitySchedule"])
  onCreateVCActivityAttendance: VCActivityAttendance @aws_subscribe(mutations: ["createVCActivityAttendance"])
  onUpdateVCActivityAttendance: VCActivityAttendance @aws_subscribe(mutations: ["updateVCActivityAttendance"])
  onDeleteVCActivityAttendance: VCActivityAttendance @aws_subscribe(mutations: ["deleteVCActivityAttendance"])
}

type ModelVCGroupConnection {
  items: [VCGroup]
  nextToken: String
}

input ModelVCGroupFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelVCGroupFilterInput]
  or: [ModelVCGroupFilterInput]
  not: ModelVCGroupFilterInput
}

input CreateVCGroupInput {
  id: ID
  name: String!
  vCGroupLeaderId: ID
}

input UpdateVCGroupInput {
  id: ID!
  name: String
  vCGroupLeaderId: ID
}

input DeleteVCGroupInput {
  id: ID
}

type ModelVCActivityListConnection {
  items: [VCActivityList]
  nextToken: String
}

input ModelVCActivityListFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelVCActivityListFilterInput]
  or: [ModelVCActivityListFilterInput]
  not: ModelVCActivityListFilterInput
}

input CreateVCActivityListInput {
  id: ID
  name: String!
}

input UpdateVCActivityListInput {
  id: ID!
  name: String
}

input DeleteVCActivityListInput {
  id: ID
}

type ModelVCActivityScheduleConnection {
  items: [VCActivitySchedule]
  nextToken: String
}

input ModelVCActivityScheduleFilterInput {
  id: ModelIDFilterInput
  start: ModelStringFilterInput
  end: ModelStringFilterInput
  and: [ModelVCActivityScheduleFilterInput]
  or: [ModelVCActivityScheduleFilterInput]
  not: ModelVCActivityScheduleFilterInput
}

input CreateVCActivityScheduleInput {
  id: ID
  start: AWSDateTime!
  end: AWSDateTime!
  vCActivityScheduleActivityId: ID!
}

input UpdateVCActivityScheduleInput {
  id: ID!
  start: AWSDateTime
  end: AWSDateTime
  vCActivityScheduleActivityId: ID
}

input DeleteVCActivityScheduleInput {
  id: ID
}

type ModelVCActivityAttendanceConnection {
  items: [VCActivityAttendance]
  nextToken: String
}

input ModelVCActivityAttendanceFilterInput {
  id: ModelIDFilterInput
  presence: ModelBooleanFilterInput
  and: [ModelVCActivityAttendanceFilterInput]
  or: [ModelVCActivityAttendanceFilterInput]
  not: ModelVCActivityAttendanceFilterInput
}

input CreateVCActivityAttendanceInput {
  id: ID
  presence: Boolean!
  vCActivityAttendanceScheduleId: ID!
  vCActivityAttendanceMemberId: ID!
}

input UpdateVCActivityAttendanceInput {
  id: ID!
  presence: Boolean
  vCActivityAttendanceScheduleId: ID
  vCActivityAttendanceMemberId: ID
}

input DeleteVCActivityAttendanceInput {
  id: ID
}
